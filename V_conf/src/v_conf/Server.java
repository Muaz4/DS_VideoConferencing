/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package v_conf;

import java.awt.AWTException;
import java.awt.List;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import static v_conf.Server.ClientHandler.img_server;

/**
 *
 * @author admin
 */
public class Server extends javax.swing.JFrame {

  
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        img_server = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        img_server.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(img_server, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(img_server, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
 
        ServerSocket server =  new ServerSocket(7800);
        System.out.println("wait....");     
        Socket s = server.accept();
        System.out.println("connect...");
        ObjectInputStream in = new ObjectInputStream(s.getInputStream());
        ImageIcon ic;

        while(true)
        {
        ic = (ImageIcon) in.readObject();
        img_server.setIcon(ic);
         
        }
      
    }
    
   public ScreenSharing screenSharing;

    public void startScreenSharing() {
        try {
            screenSharing = new ScreenSharing();
        } catch (AWTException e) {
            e.printStackTrace();
        }
    }
    private void start() {
        try {
            ServerSocket serverSocket = new ServerSocket(7800);
            System.out.println("Server started on port " + 7800);

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected: " + socket.getInetAddress().getHostAddress());

                ClientHandler client = new ClientHandler(socket, this);
                //Client.add(client);
                new Thread(client).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
        Client client = new Client();
        
//       public void broadcast(byte[] frame) {
//        for (ClientHandler Client : client) {
//            Client.sendFrame(frame);
//        }
//    }
//
//    public void removeClient(ClientHandler client) {
//        Client.remove(client);
//        System.out.println("Client disconnected: " + client.getSocket().getInetAddress().getHostAddress());
//    }
    
    class ClientHandler implements Runnable {

    private Socket socket;
    private Server videoServer;

    public ClientHandler(Socket socket, Server videoServer) {
        this.socket = socket;
        this.videoServer = videoServer;
    }
public void sendFrame(byte[] frameData) {
        try {
            socket.getOutputStream().write(frameData);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
public Socket getSocket() {
        return socket;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel img_server;
    // End of variables declaration//GEN-END:variables

        @Override
        public void run() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }
}